// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package refresh is a generated GoMock package.
package refresh

import (
	reflect "reflect"
	models "vdm/core/models"

	gomock "github.com/golang/mock/gomock"
	"github.com/google/uuid"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// findValidRefreshToken mocks base method.
func (m *MockRepository) findValidRefreshToken(id uuid.UUID) (models.RefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "findValidRefreshToken", id)
	ret0, _ := ret[0].(models.RefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// findValidRefreshToken indicates an expected call of findValidRefreshToken.
func (mr *MockRepositoryMockRecorder) findValidRefreshToken(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "findValidRefreshToken", reflect.TypeOf((*MockRepository)(nil).findValidRefreshToken), id)
}

// createRefreshToken mocks base method.
func (m *MockRepository) createRefreshToken(rft *models.RefreshToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createRefreshToken", rft)
	ret0, _ := ret[0].(error)
	return ret0
}

// createRefreshToken indicates an expected call of createRefreshToken.
func (mr *MockRepositoryMockRecorder) createRefreshToken(rft interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createRefreshToken", reflect.TypeOf((*MockRepository)(nil).createRefreshToken), rft)
}
