// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: roles.sql

package queries

import (
	"context"

	"github.com/google/uuid"
)

const getRolesByUserID = `-- name: GetRolesByUserID :many
SELECT r.id, r.name
FROM roles r
         JOIN user_roles ur ON ur.role_id = r.id
WHERE ur.user_id = $1
`

type GetRolesByUserIDRow struct {
	ID   uuid.UUID `db:"id" json:"id"`
	Name string    `db:"name" json:"name"`
}

func (q *Queries) GetRolesByUserID(ctx context.Context, userID uuid.UUID) ([]GetRolesByUserIDRow, error) {
	rows, err := q.db.Query(ctx, getRolesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRolesByUserIDRow
	for rows.Next() {
		var i GetRolesByUserIDRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
