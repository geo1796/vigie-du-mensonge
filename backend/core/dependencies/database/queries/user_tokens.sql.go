// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user_tokens.sql

package queries

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO user_tokens (user_id, category, hash, expiry)
VALUES ($1, $2, $3, $4)
    RETURNING id, user_id, category, hash, expiry
`

type CreateRefreshTokenParams struct {
	UserID   uuid.UUID `db:"user_id" json:"user_id"`
	Category string    `db:"category" json:"category"`
	Hash     string    `db:"hash" json:"hash"`
	Expiry   time.Time `db:"expiry" json:"expiry"`
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (UserToken, error) {
	row := q.db.QueryRow(ctx, createRefreshToken,
		arg.UserID,
		arg.Category,
		arg.Hash,
		arg.Expiry,
	)
	var i UserToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Category,
		&i.Hash,
		&i.Expiry,
	)
	return i, err
}

const deleteRefreshTokensByUserID = `-- name: DeleteRefreshTokensByUserID :exec
DELETE FROM user_tokens
WHERE user_id = $1
  AND category = 'REFRESH'
`

func (q *Queries) DeleteRefreshTokensByUserID(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteRefreshTokensByUserID, userID)
	return err
}
