/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignUpRouteImport } from './routes/sign-up'
import { Route as SignInRouteImport } from './routes/sign-in'
import { Route as PasswordUpdateRouteImport } from './routes/password-update'
import { Route as RedactorRouteRouteImport } from './routes/redactor/route'
import { Route as ModeratorRouteRouteImport } from './routes/moderator/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as RedactorArticlesIndexRouteImport } from './routes/redactor/articles/index'
import { Route as ModeratorArticlesIndexRouteImport } from './routes/moderator/articles/index'
import { Route as RedactorArticlesNewRouteImport } from './routes/redactor/articles/new'
import { Route as RedactorArticlesArticleRefRouteImport } from './routes/redactor/articles/$articleRef'
import { Route as ModeratorArticlesPendingRouteImport } from './routes/moderator/articles/pending'

const SignUpRoute = SignUpRouteImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => rootRouteImport,
} as any)
const SignInRoute = SignInRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRouteImport,
} as any)
const PasswordUpdateRoute = PasswordUpdateRouteImport.update({
  id: '/password-update',
  path: '/password-update',
  getParentRoute: () => rootRouteImport,
} as any)
const RedactorRouteRoute = RedactorRouteRouteImport.update({
  id: '/redactor',
  path: '/redactor',
  getParentRoute: () => rootRouteImport,
} as any)
const ModeratorRouteRoute = ModeratorRouteRouteImport.update({
  id: '/moderator',
  path: '/moderator',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const RedactorArticlesIndexRoute = RedactorArticlesIndexRouteImport.update({
  id: '/articles/',
  path: '/articles/',
  getParentRoute: () => RedactorRouteRoute,
} as any)
const ModeratorArticlesIndexRoute = ModeratorArticlesIndexRouteImport.update({
  id: '/articles/',
  path: '/articles/',
  getParentRoute: () => ModeratorRouteRoute,
} as any)
const RedactorArticlesNewRoute = RedactorArticlesNewRouteImport.update({
  id: '/articles/new',
  path: '/articles/new',
  getParentRoute: () => RedactorRouteRoute,
} as any)
const RedactorArticlesArticleRefRoute =
  RedactorArticlesArticleRefRouteImport.update({
    id: '/articles/$articleRef',
    path: '/articles/$articleRef',
    getParentRoute: () => RedactorRouteRoute,
  } as any)
const ModeratorArticlesPendingRoute =
  ModeratorArticlesPendingRouteImport.update({
    id: '/articles/pending',
    path: '/articles/pending',
    getParentRoute: () => ModeratorRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/moderator': typeof ModeratorRouteRouteWithChildren
  '/redactor': typeof RedactorRouteRouteWithChildren
  '/password-update': typeof PasswordUpdateRoute
  '/sign-in': typeof SignInRoute
  '/sign-up': typeof SignUpRoute
  '/moderator/articles/pending': typeof ModeratorArticlesPendingRoute
  '/redactor/articles/$articleRef': typeof RedactorArticlesArticleRefRoute
  '/redactor/articles/new': typeof RedactorArticlesNewRoute
  '/moderator/articles': typeof ModeratorArticlesIndexRoute
  '/redactor/articles': typeof RedactorArticlesIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/moderator': typeof ModeratorRouteRouteWithChildren
  '/redactor': typeof RedactorRouteRouteWithChildren
  '/password-update': typeof PasswordUpdateRoute
  '/sign-in': typeof SignInRoute
  '/sign-up': typeof SignUpRoute
  '/moderator/articles/pending': typeof ModeratorArticlesPendingRoute
  '/redactor/articles/$articleRef': typeof RedactorArticlesArticleRefRoute
  '/redactor/articles/new': typeof RedactorArticlesNewRoute
  '/moderator/articles': typeof ModeratorArticlesIndexRoute
  '/redactor/articles': typeof RedactorArticlesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/moderator': typeof ModeratorRouteRouteWithChildren
  '/redactor': typeof RedactorRouteRouteWithChildren
  '/password-update': typeof PasswordUpdateRoute
  '/sign-in': typeof SignInRoute
  '/sign-up': typeof SignUpRoute
  '/moderator/articles/pending': typeof ModeratorArticlesPendingRoute
  '/redactor/articles/$articleRef': typeof RedactorArticlesArticleRefRoute
  '/redactor/articles/new': typeof RedactorArticlesNewRoute
  '/moderator/articles/': typeof ModeratorArticlesIndexRoute
  '/redactor/articles/': typeof RedactorArticlesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/moderator'
    | '/redactor'
    | '/password-update'
    | '/sign-in'
    | '/sign-up'
    | '/moderator/articles/pending'
    | '/redactor/articles/$articleRef'
    | '/redactor/articles/new'
    | '/moderator/articles'
    | '/redactor/articles'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/moderator'
    | '/redactor'
    | '/password-update'
    | '/sign-in'
    | '/sign-up'
    | '/moderator/articles/pending'
    | '/redactor/articles/$articleRef'
    | '/redactor/articles/new'
    | '/moderator/articles'
    | '/redactor/articles'
  id:
    | '__root__'
    | '/'
    | '/moderator'
    | '/redactor'
    | '/password-update'
    | '/sign-in'
    | '/sign-up'
    | '/moderator/articles/pending'
    | '/redactor/articles/$articleRef'
    | '/redactor/articles/new'
    | '/moderator/articles/'
    | '/redactor/articles/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ModeratorRouteRoute: typeof ModeratorRouteRouteWithChildren
  RedactorRouteRoute: typeof RedactorRouteRouteWithChildren
  PasswordUpdateRoute: typeof PasswordUpdateRoute
  SignInRoute: typeof SignInRoute
  SignUpRoute: typeof SignUpRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/sign-up': {
      id: '/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof SignUpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sign-in': {
      id: '/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof SignInRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/password-update': {
      id: '/password-update'
      path: '/password-update'
      fullPath: '/password-update'
      preLoaderRoute: typeof PasswordUpdateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/redactor': {
      id: '/redactor'
      path: '/redactor'
      fullPath: '/redactor'
      preLoaderRoute: typeof RedactorRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/moderator': {
      id: '/moderator'
      path: '/moderator'
      fullPath: '/moderator'
      preLoaderRoute: typeof ModeratorRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/redactor/articles/': {
      id: '/redactor/articles/'
      path: '/articles'
      fullPath: '/redactor/articles'
      preLoaderRoute: typeof RedactorArticlesIndexRouteImport
      parentRoute: typeof RedactorRouteRoute
    }
    '/moderator/articles/': {
      id: '/moderator/articles/'
      path: '/articles'
      fullPath: '/moderator/articles'
      preLoaderRoute: typeof ModeratorArticlesIndexRouteImport
      parentRoute: typeof ModeratorRouteRoute
    }
    '/redactor/articles/new': {
      id: '/redactor/articles/new'
      path: '/articles/new'
      fullPath: '/redactor/articles/new'
      preLoaderRoute: typeof RedactorArticlesNewRouteImport
      parentRoute: typeof RedactorRouteRoute
    }
    '/redactor/articles/$articleRef': {
      id: '/redactor/articles/$articleRef'
      path: '/articles/$articleRef'
      fullPath: '/redactor/articles/$articleRef'
      preLoaderRoute: typeof RedactorArticlesArticleRefRouteImport
      parentRoute: typeof RedactorRouteRoute
    }
    '/moderator/articles/pending': {
      id: '/moderator/articles/pending'
      path: '/articles/pending'
      fullPath: '/moderator/articles/pending'
      preLoaderRoute: typeof ModeratorArticlesPendingRouteImport
      parentRoute: typeof ModeratorRouteRoute
    }
  }
}

interface ModeratorRouteRouteChildren {
  ModeratorArticlesPendingRoute: typeof ModeratorArticlesPendingRoute
  ModeratorArticlesIndexRoute: typeof ModeratorArticlesIndexRoute
}

const ModeratorRouteRouteChildren: ModeratorRouteRouteChildren = {
  ModeratorArticlesPendingRoute: ModeratorArticlesPendingRoute,
  ModeratorArticlesIndexRoute: ModeratorArticlesIndexRoute,
}

const ModeratorRouteRouteWithChildren = ModeratorRouteRoute._addFileChildren(
  ModeratorRouteRouteChildren,
)

interface RedactorRouteRouteChildren {
  RedactorArticlesArticleRefRoute: typeof RedactorArticlesArticleRefRoute
  RedactorArticlesNewRoute: typeof RedactorArticlesNewRoute
  RedactorArticlesIndexRoute: typeof RedactorArticlesIndexRoute
}

const RedactorRouteRouteChildren: RedactorRouteRouteChildren = {
  RedactorArticlesArticleRefRoute: RedactorArticlesArticleRefRoute,
  RedactorArticlesNewRoute: RedactorArticlesNewRoute,
  RedactorArticlesIndexRoute: RedactorArticlesIndexRoute,
}

const RedactorRouteRouteWithChildren = RedactorRouteRoute._addFileChildren(
  RedactorRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ModeratorRouteRoute: ModeratorRouteRouteWithChildren,
  RedactorRouteRoute: RedactorRouteRouteWithChildren,
  PasswordUpdateRoute: PasswordUpdateRoute,
  SignInRoute: SignInRoute,
  SignUpRoute: SignUpRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
